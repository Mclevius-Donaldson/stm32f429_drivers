
stm32f429_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000046c  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000618  08000620  00010620  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000618  08000618  00010620  2**0
                  CONTENTS
  4 .ARM          00000000  08000618  08000618  00010620  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000618  08000620  00010620  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000618  08000618  00010618  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800061c  0800061c  0001061c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010620  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000620  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000620  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010620  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000855  00000000  00000000  00010650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000245  00000000  00000000  00010ea5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000b8  00000000  00000000  000110f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000090  00000000  00000000  000111a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000013ce  00000000  00000000  00011238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000c3e  00000000  00000000  00012606  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00005508  00000000  00000000  00013244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0001874c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000224  00000000  00000000  000187a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000000 	.word	0x20000000
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08000600 	.word	0x08000600

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000004 	.word	0x20000004
 80001e8:	08000600 	.word	0x08000600

080001ec <GPIO_Init>:
 * @param[in]		- *pGPIOHandle: This value will hold the configuration bits for the given GPIO as well as the address
 * @return			- NA
 * @note			- NA
 *******************************************************************************************************************************************/
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80001ec:	b480      	push	{r7}
 80001ee:	b087      	sub	sp, #28
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;	//temp register
 80001f4:	2300      	movs	r3, #0
 80001f6:	617b      	str	r3, [r7, #20]

	// Configure the mode
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	795b      	ldrb	r3, [r3, #5]
 80001fc:	2b03      	cmp	r3, #3
 80001fe:	d81f      	bhi.n	8000240 <GPIO_Init+0x54>
	{
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));		// Shift the data 2*PinNumber
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	795b      	ldrb	r3, [r3, #5]
 8000204:	461a      	mov	r2, r3
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	791b      	ldrb	r3, [r3, #4]
 800020a:	005b      	lsls	r3, r3, #1
 800020c:	fa02 f303 	lsl.w	r3, r2, r3
 8000210:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));					// Clear the register you want to change to make sure your settings are copied correctly
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	681a      	ldr	r2, [r3, #0]
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	791b      	ldrb	r3, [r3, #4]
 800021c:	005b      	lsls	r3, r3, #1
 800021e:	2103      	movs	r1, #3
 8000220:	fa01 f303 	lsl.w	r3, r1, r3
 8000224:	43db      	mvns	r3, r3
 8000226:	4619      	mov	r1, r3
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	400a      	ands	r2, r1
 800022e:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;																			// Setting the register |= (or equal) will change the register ONLY at the specified pin (look at 2 lines above)
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	6819      	ldr	r1, [r3, #0]
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	697a      	ldr	r2, [r7, #20]
 800023c:	430a      	orrs	r2, r1
 800023e:	601a      	str	r2, [r3, #0]
	}else
	{

	}

	temp = 0;
 8000240:	2300      	movs	r3, #0
 8000242:	617b      	str	r3, [r7, #20]

	// Configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	799b      	ldrb	r3, [r3, #6]
 8000248:	461a      	mov	r2, r3
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	791b      	ldrb	r3, [r3, #4]
 800024e:	005b      	lsls	r3, r3, #1
 8000250:	fa02 f303 	lsl.w	r3, r2, r3
 8000254:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDER &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	689a      	ldr	r2, [r3, #8]
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	791b      	ldrb	r3, [r3, #4]
 8000260:	005b      	lsls	r3, r3, #1
 8000262:	2103      	movs	r1, #3
 8000264:	fa01 f303 	lsl.w	r3, r1, r3
 8000268:	43db      	mvns	r3, r3
 800026a:	4619      	mov	r1, r3
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	400a      	ands	r2, r1
 8000272:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDER |= temp;
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	6899      	ldr	r1, [r3, #8]
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	697a      	ldr	r2, [r7, #20]
 8000280:	430a      	orrs	r2, r1
 8000282:	609a      	str	r2, [r3, #8]

	temp = 0;
 8000284:	2300      	movs	r3, #0
 8000286:	617b      	str	r3, [r7, #20]

	// Configure the pull-up/down settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	79db      	ldrb	r3, [r3, #7]
 800028c:	461a      	mov	r2, r3
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	791b      	ldrb	r3, [r3, #4]
 8000292:	005b      	lsls	r3, r3, #1
 8000294:	fa02 f303 	lsl.w	r3, r2, r3
 8000298:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	68da      	ldr	r2, [r3, #12]
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	791b      	ldrb	r3, [r3, #4]
 80002a4:	005b      	lsls	r3, r3, #1
 80002a6:	2103      	movs	r1, #3
 80002a8:	fa01 f303 	lsl.w	r3, r1, r3
 80002ac:	43db      	mvns	r3, r3
 80002ae:	4619      	mov	r1, r3
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	400a      	ands	r2, r1
 80002b6:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	68d9      	ldr	r1, [r3, #12]
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	697a      	ldr	r2, [r7, #20]
 80002c4:	430a      	orrs	r2, r1
 80002c6:	60da      	str	r2, [r3, #12]

	temp = 0;
 80002c8:	2300      	movs	r3, #0
 80002ca:	617b      	str	r3, [r7, #20]

	// Configure the output type
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	7a1b      	ldrb	r3, [r3, #8]
 80002d0:	461a      	mov	r2, r3
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	791b      	ldrb	r3, [r3, #4]
 80002d6:	005b      	lsls	r3, r3, #1
 80002d8:	fa02 f303 	lsl.w	r3, r2, r3
 80002dc:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	685a      	ldr	r2, [r3, #4]
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	791b      	ldrb	r3, [r3, #4]
 80002e8:	005b      	lsls	r3, r3, #1
 80002ea:	2103      	movs	r1, #3
 80002ec:	fa01 f303 	lsl.w	r3, r1, r3
 80002f0:	43db      	mvns	r3, r3
 80002f2:	4619      	mov	r1, r3
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	400a      	ands	r2, r1
 80002fa:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	6859      	ldr	r1, [r3, #4]
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	697a      	ldr	r2, [r7, #20]
 8000308:	430a      	orrs	r2, r1
 800030a:	605a      	str	r2, [r3, #4]

	temp = 0;
 800030c:	2300      	movs	r3, #0
 800030e:	617b      	str	r3, [r7, #20]

	// Configure the output alt. functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALT)
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	795b      	ldrb	r3, [r3, #5]
 8000314:	2b02      	cmp	r3, #2
 8000316:	d134      	bne.n	8000382 <GPIO_Init+0x196>
	{
		uint32_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	791b      	ldrb	r3, [r3, #4]
 800031c:	08db      	lsrs	r3, r3, #3
 800031e:	b2db      	uxtb	r3, r3
 8000320:	613b      	str	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	791b      	ldrb	r3, [r3, #4]
 8000326:	f003 0307 	and.w	r3, r3, #7
 800032a:	60fb      	str	r3, [r7, #12]

		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	7a5b      	ldrb	r3, [r3, #9]
 8000330:	461a      	mov	r2, r3
 8000332:	68fb      	ldr	r3, [r7, #12]
 8000334:	009b      	lsls	r3, r3, #2
 8000336:	fa02 f303 	lsl.w	r3, r2, r3
 800033a:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	693a      	ldr	r2, [r7, #16]
 8000342:	3208      	adds	r2, #8
 8000344:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	791b      	ldrb	r3, [r3, #4]
 800034c:	009b      	lsls	r3, r3, #2
 800034e:	210f      	movs	r1, #15
 8000350:	fa01 f303 	lsl.w	r3, r1, r3
 8000354:	43db      	mvns	r3, r3
 8000356:	4619      	mov	r1, r3
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	4011      	ands	r1, r2
 800035e:	693a      	ldr	r2, [r7, #16]
 8000360:	3208      	adds	r2, #8
 8000362:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= temp;
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	693a      	ldr	r2, [r7, #16]
 800036c:	3208      	adds	r2, #8
 800036e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	697a      	ldr	r2, [r7, #20]
 8000378:	4311      	orrs	r1, r2
 800037a:	693a      	ldr	r2, [r7, #16]
 800037c:	3208      	adds	r2, #8
 800037e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

	temp = 0;
 8000382:	2300      	movs	r3, #0
 8000384:	617b      	str	r3, [r7, #20]
}
 8000386:	bf00      	nop
 8000388:	371c      	adds	r7, #28
 800038a:	46bd      	mov	sp, r7
 800038c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000390:	4770      	bx	lr
	...

08000394 <GPIO_PCLKControl>:
 * @param[in]		- EN: ENABLE or DISABLE
 * @return			- NA
 * @note			- NA
 ********************************************************************************************************************************************/
void GPIO_PCLKControl(GPIO_RegDef_t *pGPIOx, uint8_t EN)
{
 8000394:	b480      	push	{r7}
 8000396:	b083      	sub	sp, #12
 8000398:	af00      	add	r7, sp, #0
 800039a:	6078      	str	r0, [r7, #4]
 800039c:	460b      	mov	r3, r1
 800039e:	70fb      	strb	r3, [r7, #3]
	if(EN == ENABLE){
 80003a0:	78fb      	ldrb	r3, [r7, #3]
 80003a2:	2b01      	cmp	r3, #1
 80003a4:	d177      	bne.n	8000496 <GPIO_PCLKControl+0x102>
		if(pGPIOx == GPIOA)
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	4a3e      	ldr	r2, [pc, #248]	; (80004a4 <GPIO_PCLKControl+0x110>)
 80003aa:	4293      	cmp	r3, r2
 80003ac:	d106      	bne.n	80003bc <GPIO_PCLKControl+0x28>
		{
			GPIOA_PCLK_EN();
 80003ae:	4b3e      	ldr	r3, [pc, #248]	; (80004a8 <GPIO_PCLKControl+0x114>)
 80003b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003b2:	4a3d      	ldr	r2, [pc, #244]	; (80004a8 <GPIO_PCLKControl+0x114>)
 80003b4:	f043 0301 	orr.w	r3, r3, #1
 80003b8:	6313      	str	r3, [r2, #48]	; 0x30
		}
	}else
	{

	}
}
 80003ba:	e06c      	b.n	8000496 <GPIO_PCLKControl+0x102>
		}else if(pGPIOx == GPIOB)
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	4a3b      	ldr	r2, [pc, #236]	; (80004ac <GPIO_PCLKControl+0x118>)
 80003c0:	4293      	cmp	r3, r2
 80003c2:	d106      	bne.n	80003d2 <GPIO_PCLKControl+0x3e>
			GPIOB_PCLK_EN();
 80003c4:	4b38      	ldr	r3, [pc, #224]	; (80004a8 <GPIO_PCLKControl+0x114>)
 80003c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003c8:	4a37      	ldr	r2, [pc, #220]	; (80004a8 <GPIO_PCLKControl+0x114>)
 80003ca:	f043 0302 	orr.w	r3, r3, #2
 80003ce:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003d0:	e061      	b.n	8000496 <GPIO_PCLKControl+0x102>
		}else if(pGPIOx == GPIOC)
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	4a36      	ldr	r2, [pc, #216]	; (80004b0 <GPIO_PCLKControl+0x11c>)
 80003d6:	4293      	cmp	r3, r2
 80003d8:	d106      	bne.n	80003e8 <GPIO_PCLKControl+0x54>
			GPIOC_PCLK_EN();
 80003da:	4b33      	ldr	r3, [pc, #204]	; (80004a8 <GPIO_PCLKControl+0x114>)
 80003dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003de:	4a32      	ldr	r2, [pc, #200]	; (80004a8 <GPIO_PCLKControl+0x114>)
 80003e0:	f043 0304 	orr.w	r3, r3, #4
 80003e4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003e6:	e056      	b.n	8000496 <GPIO_PCLKControl+0x102>
		}else if(pGPIOx == GPIOD)
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	4a32      	ldr	r2, [pc, #200]	; (80004b4 <GPIO_PCLKControl+0x120>)
 80003ec:	4293      	cmp	r3, r2
 80003ee:	d106      	bne.n	80003fe <GPIO_PCLKControl+0x6a>
			GPIOD_PCLK_EN();
 80003f0:	4b2d      	ldr	r3, [pc, #180]	; (80004a8 <GPIO_PCLKControl+0x114>)
 80003f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003f4:	4a2c      	ldr	r2, [pc, #176]	; (80004a8 <GPIO_PCLKControl+0x114>)
 80003f6:	f043 0308 	orr.w	r3, r3, #8
 80003fa:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003fc:	e04b      	b.n	8000496 <GPIO_PCLKControl+0x102>
		}else if(pGPIOx == GPIOE)
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	4a2d      	ldr	r2, [pc, #180]	; (80004b8 <GPIO_PCLKControl+0x124>)
 8000402:	4293      	cmp	r3, r2
 8000404:	d106      	bne.n	8000414 <GPIO_PCLKControl+0x80>
			GPIOE_PCLK_EN();
 8000406:	4b28      	ldr	r3, [pc, #160]	; (80004a8 <GPIO_PCLKControl+0x114>)
 8000408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800040a:	4a27      	ldr	r2, [pc, #156]	; (80004a8 <GPIO_PCLKControl+0x114>)
 800040c:	f043 0310 	orr.w	r3, r3, #16
 8000410:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000412:	e040      	b.n	8000496 <GPIO_PCLKControl+0x102>
		}else if(pGPIOx == GPIOF)
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	4a29      	ldr	r2, [pc, #164]	; (80004bc <GPIO_PCLKControl+0x128>)
 8000418:	4293      	cmp	r3, r2
 800041a:	d106      	bne.n	800042a <GPIO_PCLKControl+0x96>
			GPIOF_PCLK_EN();
 800041c:	4b22      	ldr	r3, [pc, #136]	; (80004a8 <GPIO_PCLKControl+0x114>)
 800041e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000420:	4a21      	ldr	r2, [pc, #132]	; (80004a8 <GPIO_PCLKControl+0x114>)
 8000422:	f043 0320 	orr.w	r3, r3, #32
 8000426:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000428:	e035      	b.n	8000496 <GPIO_PCLKControl+0x102>
		}else if(pGPIOx == GPIOG)
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	4a24      	ldr	r2, [pc, #144]	; (80004c0 <GPIO_PCLKControl+0x12c>)
 800042e:	4293      	cmp	r3, r2
 8000430:	d106      	bne.n	8000440 <GPIO_PCLKControl+0xac>
			GPIOG_PCLK_EN();
 8000432:	4b1d      	ldr	r3, [pc, #116]	; (80004a8 <GPIO_PCLKControl+0x114>)
 8000434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000436:	4a1c      	ldr	r2, [pc, #112]	; (80004a8 <GPIO_PCLKControl+0x114>)
 8000438:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800043c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800043e:	e02a      	b.n	8000496 <GPIO_PCLKControl+0x102>
		}else if(pGPIOx == GPIOH)
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	4a20      	ldr	r2, [pc, #128]	; (80004c4 <GPIO_PCLKControl+0x130>)
 8000444:	4293      	cmp	r3, r2
 8000446:	d106      	bne.n	8000456 <GPIO_PCLKControl+0xc2>
			GPIOH_PCLK_EN();
 8000448:	4b17      	ldr	r3, [pc, #92]	; (80004a8 <GPIO_PCLKControl+0x114>)
 800044a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800044c:	4a16      	ldr	r2, [pc, #88]	; (80004a8 <GPIO_PCLKControl+0x114>)
 800044e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000452:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000454:	e01f      	b.n	8000496 <GPIO_PCLKControl+0x102>
		else if(pGPIOx == GPIOI)
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	4a1b      	ldr	r2, [pc, #108]	; (80004c8 <GPIO_PCLKControl+0x134>)
 800045a:	4293      	cmp	r3, r2
 800045c:	d106      	bne.n	800046c <GPIO_PCLKControl+0xd8>
			GPIOI_PCLK_EN();
 800045e:	4b12      	ldr	r3, [pc, #72]	; (80004a8 <GPIO_PCLKControl+0x114>)
 8000460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000462:	4a11      	ldr	r2, [pc, #68]	; (80004a8 <GPIO_PCLKControl+0x114>)
 8000464:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000468:	6313      	str	r3, [r2, #48]	; 0x30
}
 800046a:	e014      	b.n	8000496 <GPIO_PCLKControl+0x102>
		else if(pGPIOx == GPIOJ)
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	4a17      	ldr	r2, [pc, #92]	; (80004cc <GPIO_PCLKControl+0x138>)
 8000470:	4293      	cmp	r3, r2
 8000472:	d106      	bne.n	8000482 <GPIO_PCLKControl+0xee>
			GPIOJ_PCLK_EN();
 8000474:	4b0c      	ldr	r3, [pc, #48]	; (80004a8 <GPIO_PCLKControl+0x114>)
 8000476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000478:	4a0b      	ldr	r2, [pc, #44]	; (80004a8 <GPIO_PCLKControl+0x114>)
 800047a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800047e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000480:	e009      	b.n	8000496 <GPIO_PCLKControl+0x102>
		else if(pGPIOx == GPIOK)
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	4a12      	ldr	r2, [pc, #72]	; (80004d0 <GPIO_PCLKControl+0x13c>)
 8000486:	4293      	cmp	r3, r2
 8000488:	d105      	bne.n	8000496 <GPIO_PCLKControl+0x102>
			GPIOK_PCLK_EN();
 800048a:	4b07      	ldr	r3, [pc, #28]	; (80004a8 <GPIO_PCLKControl+0x114>)
 800048c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800048e:	4a06      	ldr	r2, [pc, #24]	; (80004a8 <GPIO_PCLKControl+0x114>)
 8000490:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000494:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000496:	bf00      	nop
 8000498:	370c      	adds	r7, #12
 800049a:	46bd      	mov	sp, r7
 800049c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a0:	4770      	bx	lr
 80004a2:	bf00      	nop
 80004a4:	40020000 	.word	0x40020000
 80004a8:	40023800 	.word	0x40023800
 80004ac:	40020400 	.word	0x40020400
 80004b0:	40020800 	.word	0x40020800
 80004b4:	40020c00 	.word	0x40020c00
 80004b8:	40021000 	.word	0x40021000
 80004bc:	40021400 	.word	0x40021400
 80004c0:	40021800 	.word	0x40021800
 80004c4:	40021c00 	.word	0x40021c00
 80004c8:	40022000 	.word	0x40022000
 80004cc:	40022400 	.word	0x40022400
 80004d0:	40022800 	.word	0x40022800

080004d4 <GPIO_TogglePin>:
 * @param[in]		- PinNumber: Pin numbers
 * @return			- NA
 * @note			- NA
 ********************************************************************************************************************************************/
void GPIO_TogglePin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 80004d4:	b480      	push	{r7}
 80004d6:	b083      	sub	sp, #12
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
 80004dc:	460b      	mov	r3, r1
 80004de:	70fb      	strb	r3, [r7, #3]
	pGPIOx->ODR ^= (1 << PinNumber);
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	695b      	ldr	r3, [r3, #20]
 80004e4:	78fa      	ldrb	r2, [r7, #3]
 80004e6:	2101      	movs	r1, #1
 80004e8:	fa01 f202 	lsl.w	r2, r1, r2
 80004ec:	405a      	eors	r2, r3
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	615a      	str	r2, [r3, #20]
}
 80004f2:	bf00      	nop
 80004f4:	370c      	adds	r7, #12
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr

080004fe <delay>:
 */

#include "stm32f429.h"

void delay()
{
 80004fe:	b480      	push	{r7}
 8000500:	b083      	sub	sp, #12
 8000502:	af00      	add	r7, sp, #0
	for(uint32_t i; i < 5000; i++)
 8000504:	e002      	b.n	800050c <delay+0xe>
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	3301      	adds	r3, #1
 800050a:	607b      	str	r3, [r7, #4]
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	f241 3287 	movw	r2, #4999	; 0x1387
 8000512:	4293      	cmp	r3, r2
 8000514:	d9f7      	bls.n	8000506 <delay+0x8>
	{

	}
}
 8000516:	bf00      	nop
 8000518:	bf00      	nop
 800051a:	370c      	adds	r7, #12
 800051c:	46bd      	mov	sp, r7
 800051e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000522:	4770      	bx	lr

08000524 <main>:

int main(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b084      	sub	sp, #16
 8000528:	af00      	add	r7, sp, #0
	GPIO_Handle_t LED_PIN;

	LED_PIN.pGPIOx = GPIOB;
 800052a:	4b0d      	ldr	r3, [pc, #52]	; (8000560 <main+0x3c>)
 800052c:	607b      	str	r3, [r7, #4]
	LED_PIN.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_7;
 800052e:	2307      	movs	r3, #7
 8000530:	723b      	strb	r3, [r7, #8]
	LED_PIN.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000532:	2301      	movs	r3, #1
 8000534:	727b      	strb	r3, [r7, #9]
	LED_PIN.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000536:	2302      	movs	r3, #2
 8000538:	72bb      	strb	r3, [r7, #10]
	LED_PIN.GPIO_PinConfig.GPIO_PinOPType = GPIO_OTYPE_PP;
 800053a:	2300      	movs	r3, #0
 800053c:	733b      	strb	r3, [r7, #12]
	LED_PIN.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_NO_PUPD;
 800053e:	2300      	movs	r3, #0
 8000540:	72fb      	strb	r3, [r7, #11]

	GPIO_PCLKControl(GPIOB, ENABLE);
 8000542:	2101      	movs	r1, #1
 8000544:	4806      	ldr	r0, [pc, #24]	; (8000560 <main+0x3c>)
 8000546:	f7ff ff25 	bl	8000394 <GPIO_PCLKControl>
	GPIO_Init(&LED_PIN);
 800054a:	1d3b      	adds	r3, r7, #4
 800054c:	4618      	mov	r0, r3
 800054e:	f7ff fe4d 	bl	80001ec <GPIO_Init>

	while(1)
	{
		GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000552:	2107      	movs	r1, #7
 8000554:	4802      	ldr	r0, [pc, #8]	; (8000560 <main+0x3c>)
 8000556:	f7ff ffbd 	bl	80004d4 <GPIO_TogglePin>
		delay();
 800055a:	f7ff ffd0 	bl	80004fe <delay>
		GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 800055e:	e7f8      	b.n	8000552 <main+0x2e>
 8000560:	40020400 	.word	0x40020400

08000564 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000564:	480d      	ldr	r0, [pc, #52]	; (800059c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000566:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000568:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800056c:	480c      	ldr	r0, [pc, #48]	; (80005a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800056e:	490d      	ldr	r1, [pc, #52]	; (80005a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000570:	4a0d      	ldr	r2, [pc, #52]	; (80005a8 <LoopForever+0xe>)
  movs r3, #0
 8000572:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000574:	e002      	b.n	800057c <LoopCopyDataInit>

08000576 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000576:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000578:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800057a:	3304      	adds	r3, #4

0800057c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800057c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800057e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000580:	d3f9      	bcc.n	8000576 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000582:	4a0a      	ldr	r2, [pc, #40]	; (80005ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000584:	4c0a      	ldr	r4, [pc, #40]	; (80005b0 <LoopForever+0x16>)
  movs r3, #0
 8000586:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000588:	e001      	b.n	800058e <LoopFillZerobss>

0800058a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800058a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800058c:	3204      	adds	r2, #4

0800058e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800058e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000590:	d3fb      	bcc.n	800058a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000592:	f000 f811 	bl	80005b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000596:	f7ff ffc5 	bl	8000524 <main>

0800059a <LoopForever>:

LoopForever:
    b LoopForever
 800059a:	e7fe      	b.n	800059a <LoopForever>
  ldr   r0, =_estack
 800059c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80005a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005a4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80005a8:	08000620 	.word	0x08000620
  ldr r2, =_sbss
 80005ac:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80005b0:	2000001c 	.word	0x2000001c

080005b4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005b4:	e7fe      	b.n	80005b4 <ADC_IRQHandler>
	...

080005b8 <__libc_init_array>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	4d0d      	ldr	r5, [pc, #52]	; (80005f0 <__libc_init_array+0x38>)
 80005bc:	4c0d      	ldr	r4, [pc, #52]	; (80005f4 <__libc_init_array+0x3c>)
 80005be:	1b64      	subs	r4, r4, r5
 80005c0:	10a4      	asrs	r4, r4, #2
 80005c2:	2600      	movs	r6, #0
 80005c4:	42a6      	cmp	r6, r4
 80005c6:	d109      	bne.n	80005dc <__libc_init_array+0x24>
 80005c8:	4d0b      	ldr	r5, [pc, #44]	; (80005f8 <__libc_init_array+0x40>)
 80005ca:	4c0c      	ldr	r4, [pc, #48]	; (80005fc <__libc_init_array+0x44>)
 80005cc:	f000 f818 	bl	8000600 <_init>
 80005d0:	1b64      	subs	r4, r4, r5
 80005d2:	10a4      	asrs	r4, r4, #2
 80005d4:	2600      	movs	r6, #0
 80005d6:	42a6      	cmp	r6, r4
 80005d8:	d105      	bne.n	80005e6 <__libc_init_array+0x2e>
 80005da:	bd70      	pop	{r4, r5, r6, pc}
 80005dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80005e0:	4798      	blx	r3
 80005e2:	3601      	adds	r6, #1
 80005e4:	e7ee      	b.n	80005c4 <__libc_init_array+0xc>
 80005e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80005ea:	4798      	blx	r3
 80005ec:	3601      	adds	r6, #1
 80005ee:	e7f2      	b.n	80005d6 <__libc_init_array+0x1e>
 80005f0:	08000618 	.word	0x08000618
 80005f4:	08000618 	.word	0x08000618
 80005f8:	08000618 	.word	0x08000618
 80005fc:	0800061c 	.word	0x0800061c

08000600 <_init>:
 8000600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000602:	bf00      	nop
 8000604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000606:	bc08      	pop	{r3}
 8000608:	469e      	mov	lr, r3
 800060a:	4770      	bx	lr

0800060c <_fini>:
 800060c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800060e:	bf00      	nop
 8000610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000612:	bc08      	pop	{r3}
 8000614:	469e      	mov	lr, r3
 8000616:	4770      	bx	lr
